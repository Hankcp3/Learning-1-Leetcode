5. Longest Palindromic Substring
https://www.youtube.com/watch?v=XYQecbcd6_c
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ""
        resLen = 0
        for i in range(len(s)):
            #odd situation:
            l,r=i,i
            while l>=0 and r<len(s) and s[l] == s[r]:
                if (r-l+1)>resLen:
                    res = s[l:r+1]
                    resLen = r-l+1
                l-=1
                r+=1
            #even:
            l,r = i,i+1
            while l>=0 and r<len(s) and s[l] == s[r]:
                if (r-l+1)>resLen:
                    res = s[l:r+1]
                    resLen = r-l+1
                l-=1
                r+=1
        return res  
        
22. Generate Parentheses
https://www.youtube.com/watch?v=s9fokUqJ76A
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def backtracing(openN, closeN, stack):
            if openN == closeN == n:
                res.append("".join(stack))
                return
            if openN < n:
                backtracing(openN+1,closeN,stack+["("])
            if closeN < openN:
                backtracing(openN, closeN+1,stack+[")"])
        backtracing(0,0,[])
        return res
