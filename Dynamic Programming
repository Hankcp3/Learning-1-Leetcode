5. Longest Palindromic Substring
https://www.youtube.com/watch?v=XYQecbcd6_c
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ""
        resLen = 0
        for i in range(len(s)):
            #odd situation:
            l,r=i,i
            while l>=0 and r<len(s) and s[l] == s[r]:
                if (r-l+1)>resLen:
                    res = s[l:r+1]
                    resLen = r-l+1
                l-=1
                r+=1
            #even:
            l,r = i,i+1
            while l>=0 and r<len(s) and s[l] == s[r]:
                if (r-l+1)>resLen:
                    res = s[l:r+1]
                    resLen = r-l+1
                l-=1
                r+=1
        return res  
        
22. Generate Parentheses
https://www.youtube.com/watch?v=s9fokUqJ76A
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def backtracing(openN, closeN, stack):
            if openN == closeN == n:
                res.append("".join(stack))
                return
            if openN < n:
                backtracing(openN+1,closeN,stack+["("])
            if closeN < openN:
                backtracing(openN, closeN+1,stack+[")"])
        backtracing(0,0,[])
        return res
        
45. Jump Game II
class Solution:
    def jump(self, nums: List[int]) -> int:
        res = 0
        l = r = 0
        while (r<len(nums)-1):
            farthest = 0
            for i in range(l,r+1):
                farthest = max(farthest,i+nums[i])
            l = r+1
            r = farthest
            res += 1
        return res
        
        
55. Jump Game
class Solution:
    def canJump(self, nums: List[int]) -> bool:

        if len(nums) == 1:
            return True

        l=r=0
        while (r<len(nums)-1):
            farest = 0
            for i in range(l,r+1):
                farest = max(farest,i+nums[i])
            if farest == 0:
                return False
            l = r+1
            r = farest
            if l <= len(nums)-1 <= r:
                return True
        return False
        
        
53. Maximum Subarray 
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxsub = nums[0]
        curnum = 0
        for n in nums:
            if curnum<0:
                curnum = 0
            curnum += n
            maxsub = max(maxsub, curnum)
        return maxsub
        
62. Unique Paths        
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        rows = [1]*n
        for i in range(m-1):
            newrows = [1]*n
            for j in range(n-2,-1,-1):
                newrows[j] = newrows[j+1]+rows[j]
            rows = newrows
        return rows[0]       
        
63. Unique Patha II
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m  = len(obstacleGrid)
        n = len(obstacleGrid[0])
        countgrid = [[0]*n for _ in range(m)]
        if m==0 and n==0:
            return 0
        if obstacleGrid[0][0] == 0:
            countgrid[0][0] = 1
        for i in range(m):
            for j in range(n):
                if i ==0 and j == 0:
                    continue
                if obstacleGrid[i][j] == 1:
                    continue
                if i == 0:
                    countgrid[i][j] = countgrid[i][j-1]
                    continue
                if j == 0:
                    countgrid[i][j] = countgrid[i-1][j]
                    continue
                countgrid[i][j] = countgrid[i-1][j]+countgrid[i][j-1]
        return countgrid[m-1][n-1]
	
64. Minimum Path Sum        
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        rows = len(grid)
        cols = len(grid[0])
        res = [[float("inf")]*(cols+1) for _ in range(rows+1)]
        res[rows][cols-1] = 0 #it can be random
        for i in range(rows-1,-1,-1):
            for j in range(cols-1,-1,-1):
                res[i][j] = grid[i][j]+min(res[i+1][j],res[i][j+1])
        return res[0][0]
	
70. Climbing Stairs     
class Solution:
    def climbStairs(self, n: int) -> int:
        one,two = 1,1
        for i in range(n-1):
            temp = one
            one = one+two
            two = temp
        return one


        
