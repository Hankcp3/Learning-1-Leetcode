
141. Linked List Cycle
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        seen = set()
        cur = head
        while cur:
            if cur in seen:
                return True
            seen.add(cur)
            cur = cur.next
        return False

142. Linked List Cycle II
class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        seen = set()
        cur = head
        while cur:
            if cur in seen:
                return cur
            seen.add(cur)
            cur = cur.next
        return None

smart way:

160. Intersection of Two Linked Lists
My solution: Hashmap:
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        cur1 = headA
        cur2 = headB
        hashset = set()
        while cur1:
            hashset.add(cur1)
            cur1 = cur1.next
        while cur2:
            if cur2 in hashset:
                return cur2
            cur2 = cur2.next
        return None
