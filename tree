https://www.youtube.com/watch?v=_1ZJ343CYIU
#tips:
1. recursive.
2. use deque popleft() or pop() , not list[-1] or list[0], because faster and can delete the first and last element. O(1)<O(N)
105	
Construct Binary Tree from Preorder and Inorder Traversal
class Solution:
    from collections import deque
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        preorder = deque(preorder)
        def rec(preorder,inorder):
            if not preorder or not inorder: return None
            tree = TreeNode(preorder.popleft())
            mid = inorder.index(tree.val)
            tree.left = rec(preorder,inorder[:mid])
            tree.right = rec(preorder,inorder[mid+1:])
            return tree
        return rec(preorder,inorder)

106	
Construct Binary Tree from Inorder and Postorder Traversal
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        def rec(inorder,postorder):
            if not inorder or not postorder: return None
            tree = TreeNode(postorder.pop())
            mid = inorder.index(tree.val)
            tree.right = rec(inorder[mid+1:],postorder)
            tree.left = rec(inorder[:mid],postorder)
            return tree
        return rec(inorder,postorder)
        
        
BFS algo
graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = [] # List for visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)

  while queue:          # Creating loop to visit each node
    m = queue.pop(0) 
    print (m, end = " ") 

    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    # function calling
        
